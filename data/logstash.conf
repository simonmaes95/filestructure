input {
    file {
        type           => "gatling"
        path           => "/config-dir/simulation.log"
        start_position => "beginning"
    }    
}

filter {
    grok {
         match => { "message" => "%{WORD:logtype}" }
    }

    if [logtype] == "REQUEST" {
        grok {
            match => { "message" => "%{USERNAME:username}\s+%{INT:repetitions}\s+%{WORD:pageName}\s+%{DATA:requestName}\s+%{NUMBER:requestStart}\s+%{NUMBER:responseEnd}\s+%{WORD:status}\s+%{NUMBER:startTime}" }
        }
        ruby {
            code => "
                     event.set('responseDuration', (event.get('responseEnd').to_i - event.get('requestStart').to_i))
	             event.set('durationStamp', (event.get('requestStart').to_i - event.get('startTime').to_i))
                    "
        }

    }else if [logtype] == "GROUP" {
        grok {
            match => { "message" => "%{USERNAME:username}\s+%{INT:repetitions}\s+%{WORD:pageName}\s+%{NUMBER:requestStart}\s+%{NUMBER:responseEnd}\s+%{INT:duration}\s+%{WORD:status}\s+%{NUMBER:startTime}" }
        }
    }else if [logtype] == "RUN" {
        grok {
            match => { "message" => "%{WORD:scrap}\s+%{USERNAME:testName}\s+(%{USERNAME:description})?\s+%{USERNAME:scriptName}\s+%{NUMBER:startTime}\s+%{NUMBER:version}\s+%{NUMBER:startTime}" }
        }
        mutate {
            remove_field => ["scrap"]
        }
    }else if [logtype] == "USER" {
        grok {
            match => { "message" => "%{USERNAME:username}\s+%{INT:repetitions}\s+%{WORD:action}\s+%{NUMBER:startTime}\s+%{NUMBER:endTime}\s+%{NUMBER:startTime}" }
        }
    }

    mutate {
        gsub => [
            "status", "OK", true,
            "status", "KO", false
        ]
        remove_field => ["host", "path", "type"]
    }

    mutate {
        convert => { "status" => "boolean" }
    }
}

output {
    elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "gatling-%{+YYYY.MM.dd}"
        codec => "json"
    }
}
